// Code generated for package main by go-bindata DO NOT EDIT. (@generated)
// sources:
// winres/taskbaricon.ico
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _winresTaskbariconIco = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x96\x6d\x4c\x13\x77\x1c\xc7\xff\xa7\x0c\xcc\x06\x2b\x5b\xa2\x4b\xaf\x4f\x77\xbd\x3e\x69\x50\xb7\x57\xd3\x17\xd8\x65\xaf\x30\x8b\xed\x9c\xd8\xbd\xa0\x82\xb0\x17\xc2\x9b\xc1\x7c\xe1\x16\x22\x81\x38\x62\x32\x6b\xa7\xe0\xdc\x8c\x9b\x3a\x5f\x4c\x49\x18\xfa\x02\x90\x38\xb6\x29\x8b\xb1\x64\x04\x47\x06\xc6\x37\x5e\x69\x0b\x7d\xba\xd2\xf6\xae\xca\xf5\x01\xda\xdf\x72\x20\x89\x23\x01\xfb\xc8\x37\xf9\xe4\x72\xff\xcb\x7d\x3f\x97\xbb\x7f\xee\xff\x47\x08\x43\x18\x22\x08\xe1\x48\xa0\x9e\x72\x84\xb6\x21\x84\x74\x08\x21\x02\x21\xf4\x01\x5a\x1e\x5f\x4a\x39\x42\x6f\xbf\xb1\x4c\xb6\xb1\x93\x1f\x63\x34\x6e\x28\xb1\x53\x9f\x60\xd9\xb7\x64\x1f\x1a\x37\x94\xd2\x62\x43\x0f\x2d\x36\x98\x68\xb1\xa1\x74\xa3\x9f\x83\xc6\x8d\x65\xb4\xd8\xe8\xa4\xc5\xc6\x38\x2d\x36\x3e\xa0\xc5\x46\x93\x1d\x3f\x58\xba\x51\x7e\x3b\x5e\x5d\x66\xc7\xab\x5d\x76\xbc\x1a\x5e\x10\xb7\xe3\xd5\x7f\xd9\x71\xd3\xee\x8d\xf0\x4f\x4b\x6a\xca\xa6\x25\x35\xae\x69\x49\x0d\xbc\x44\xca\x21\xa9\xf9\xc9\x21\x35\x6f\x2e\xb4\xdf\x29\x6d\x28\x73\x4a\xeb\x5d\x4e\x69\x3d\xac\xa2\xd7\x29\x6d\x28\x2a\xb4\xdf\x25\x6b\x2c\x73\x49\x1b\x5d\x2e\x69\x23\xac\xa2\xd7\x25\x6b\x2a\xb8\x7f\x46\xd6\xb2\x75\x46\xd6\xcc\xcc\xc8\x9a\x61\x15\x7f\xcc\xc8\x5a\x4a\x0a\xe9\x76\x13\xad\x9b\x66\xe5\x5f\x36\xcd\xca\x4f\x2c\xcc\xca\x4f\xc0\x2a\xb8\x59\xf9\x57\x95\x85\x72\x7b\x34\x5f\x63\x6e\x45\x7b\xa5\x5b\xde\xe6\x77\xcb\xdb\x60\x0d\xfe\x75\x2b\xda\xc9\x82\xf8\x15\xa7\x49\x8f\xa2\x73\xd2\xa3\xe8\x84\x75\x48\x79\x14\x9d\x77\x3c\x8a\xd3\xe5\xf9\x74\xfb\x08\xab\xc8\x4b\x58\xfa\xbd\x84\x25\xe5\x25\x2c\xf0\x0a\x16\xbd\x84\xe5\x82\x8f\xfc\x36\x2f\x73\xc1\xaf\xbc\x58\xec\x27\xbb\x2d\x3e\xb2\x7b\xd1\x47\x76\x41\x7a\x74\xc7\xfc\xe4\x85\xcf\xfd\xd4\xc5\x9c\xfe\x07\x8c\xea\xca\x26\x46\x79\xb9\x81\x51\x5e\xe2\x19\xe5\x25\xc8\x90\x30\xa3\xbc\xfc\x11\xa3\xbe\x92\xd5\xfa\x30\xb7\xe3\x17\x2c\x40\x5d\xaf\x0c\x50\xd7\x98\x00\x75\x0d\xb2\x64\x3a\x40\x5d\xdf\x95\x95\x9f\xea\x21\xe7\xa8\x1b\x93\x73\xd4\x0d\xc8\x11\xdb\x1c\xd5\x23\xce\xc4\x1d\x54\xdd\x16\x05\x55\x7d\xfd\x41\x55\x5f\x2a\xa8\xea\x83\x1c\x49\x06\x55\x7d\x37\x83\xaa\xdb\x69\xed\x3a\xc2\x9a\xa1\xe2\x90\x7a\xd0\x12\x52\x0f\x2c\x86\x54\x03\x90\x17\xd4\x03\x0b\x21\xf5\xe0\xa9\xb0\x66\xe8\xb5\xf5\xdc\x5c\xc5\x9f\x18\xab\x19\x36\x85\xd5\xc3\x7c\x58\xfd\x1b\xe4\x97\xe1\x79\x56\xf3\xfb\x21\x6e\xe7\xbd\x35\xe7\x23\xab\x1d\x29\x62\x35\x23\x37\x59\xcd\x08\x70\x05\x60\xa9\x5b\x3b\xb2\xe6\x1a\xc5\xe9\x1e\x6e\xe2\xb4\xb6\x6f\x38\xed\x68\x32\xa2\x1d\x85\x7c\xc2\x69\x47\x53\x9c\xd6\x76\x46\x70\xac\xf7\x0d\x22\xda\x31\x49\x44\x37\xde\x1b\xd1\x3d\x72\x47\x74\x8f\x7c\x79\xc2\x13\xd1\x8d\xff\x1a\xd1\x8e\x49\xd3\x99\x83\xcf\xb6\xff\x53\x1c\xd9\x3e\x21\x0a\xec\x9c\x52\x07\x2a\xa6\x0e\x06\x2a\xa6\x0e\x67\x89\x31\x50\x31\x49\x3e\xd3\x4d\x88\x84\xce\x74\xdc\x42\xee\x55\xb9\xb1\xb1\x7d\x8e\xdd\x8f\xf7\xd2\x13\x4f\xf6\x3c\x8d\x3f\xd9\xf3\x34\x91\x25\xb1\xa9\xbd\xf4\x83\xbf\xf5\x0e\x75\xba\x6e\x21\xb7\x0e\x30\xbb\x86\xf6\x7b\x1f\xdf\xad\xf2\xc2\xdd\x2a\x4f\x8e\x78\x53\x77\xf6\x7b\xc7\x6f\x1d\x60\x76\xa4\xe3\xfe\xf1\x53\xee\xf5\xab\x26\xd6\xf6\xf3\x61\x16\xf2\x48\xea\xaa\x89\x7d\x28\x74\xbf\xca\xdf\x6d\x7e\x5e\xdc\x65\x7e\xde\x75\xfe\xc8\xbc\xed\xfc\x91\xf9\xd1\x3c\x61\x13\x3a\x85\xee\x74\xde\x81\xb5\x96\x2f\xb2\xd6\xf2\x5b\xac\x75\xfc\x16\xcb\x51\x1e\x3f\x5b\xc7\x7f\x76\xb6\x8e\x3f\x9e\x21\xb5\x67\x8e\xf2\xdb\x84\x8e\xa5\xae\x5a\x3e\xe3\xbd\xe9\xf1\xe6\xe8\x3b\x27\x9b\xa2\x83\x1d\xc7\xa2\x0b\x1d\xc7\xa2\xc9\x0c\x49\x9c\x6c\x8a\xf6\x7e\xd1\x12\xdd\x9a\xa9\x57\xc8\xa1\x53\xb1\x72\x73\x5b\x6c\xb0\xbe\x35\x96\xac\x6f\x8d\x41\x96\x24\xcd\x6d\xb1\x7e\xa1\x2b\x53\xff\x87\xd6\xb8\x4a\x7f\x2e\x6e\xdf\x77\x2e\x1e\xca\x05\xa1\x43\xe8\xca\xd4\xff\xfe\x77\x09\xec\xbd\xef\x13\x6f\xbe\xfb\x43\xe2\xad\x5c\x10\x3a\x84\xae\xb5\x3c\xc0\x01\x00\xdb\x0e\xc0\xea\x01\x58\x05\x00\x2b\xfa\x3f\x0e\x11\xc0\xfd\x12\x80\xfb\x9b\x01\x3a\x30\x00\x84\x20\x85\x50\xfb\xe2\x32\xfa\x18\x42\x0a\x16\x21\x91\x03\xa1\x92\x15\x84\x73\x61\x3c\xf6\xd2\xf5\x95\xb1\x17\xf7\xea\x57\xf8\x2f\x00\x00\xff\xff\x8e\xcc\x52\x8c\xbe\x10\x00\x00")

func winresTaskbariconIcoBytes() ([]byte, error) {
	return bindataRead(
		_winresTaskbariconIco,
		"winres/taskbaricon.ico",
	)
}

func winresTaskbariconIco() (*asset, error) {
	bytes, err := winresTaskbariconIcoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "winres/taskbaricon.ico", size: 4286, mode: os.FileMode(438), modTime: time.Unix(1700832834, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"winres/taskbaricon.ico": winresTaskbariconIco,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"winres": &bintree{nil, map[string]*bintree{
		"taskbaricon.ico": &bintree{winresTaskbariconIco, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
